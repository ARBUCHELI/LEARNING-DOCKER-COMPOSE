# 1. Understanding Docker Compose
---------------------------------

. Compose in the Docker tool ecosystem
--------------------------------------
Docker tutorials, including this one, typically walk through a simple example of starting one or two Docker containers. 

However, software systems out in the wild are rarely that simple. 

A mature software system will usually have at least a few Dockerized services, each with specific, individual configurations. 

There may be some shared third-party dependencies or some services may depend on each other, which means that they need to be initialized in a specific order. 

In a microservice architecture, there may be hundreds of services to contend with. 

The simple steps to follow for starting one or two containers become extremely tedious or even impossible for starting hundreds of containers. 

That's where Docker Compose comes in. Docker Compose is an independent tool that comes standard with most downloadable Docker distributions. 

Fundamentally, you can think of Docker Compose as simply a markdown language. 

It provides scaffolding for software developers to specify their Docker configurations as code. 

Using Docker Compose instead of manually configuring and initializing many individual Docker containers, developers can simplify the process down to running a single configuration file. 

Docker Compose doesn't add any functionality to the Docker ecosystem, but it does make the existing functionality significantly easier to use. 

This course is intended to clarify what Docker Compose is and is not and will provide detailed examples of how to leverage Compose in any Docker-based software system.

. Docker Tutorial Example
-------------------------

		Container_1 -------------------- Container_2

	. Production systems are typically more complex


. Production System Considerations
----------------------------------
. Multiple systems

. Microservices

. Third-party dependencies


. Docker Compose
----------------
Markdwon tool for developers to specify Docker configurations as code


	. Docker Compose can document a system as a runnable configuration file.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

. Docker Compose basics
-----------------------
Understanding configuration as code is core to understanding Docker Compose. 

Configuration means all of the settings that allow the system to run, such as where persistent data lives, how to access and send messages to other internal and external services, and what environment-specific values to use. 

Most configuration as code tools, including Docker Compose, are declarative rather than procedural. 

With Docker Compose, configuring a Docker environment involves executing a set of procedural steps in a specific order. 

Each subsequent step relies on the previous step and there are some implicit assumptions about the state of your Docker environment baked in. There can be bugs if the state of the environment does not match those implicit assumptions. 

For example, you may have a set of procedural steps written to build and run a Docker container. These steps will work the first time they are run, but on the second time around, they will not run as expected. This is because if the original container is already running, the run step will fail unless the old container is explicitly stopped first. 

Declarative tools, like Docker Compose, allow you to specify the desired end result and will execute any steps to reach that result automatically. 

In this example, the desired end result is to have a container running. 

This means that no matter how many times you execute your Docker Compose configuration, it should produce the same result each time. 

How it reaches that end result, including startup and cleanup steps, are only implementation details, and those are fully managed by Docker Compose under the hood. 

In general, there are several other great advantages to configuration as code, too. A configuration file can be checked into version control, which makes it easy to revert to previous versions if the configuration ever breaks. 

It's also self-documenting, so you never need to worry about trying to remember that one command you ran two months ago. 

Finally, it makes it significantly easier to manage multiple Docker environments, each with slightly different configurations, like local development and your testing environment. 

Each one can hae their own independent configuration file.


. Configuration as Code
-----------------------
File that contains all of the settings that allow a system to run


. Configuration Examples
------------------------
. Where persistent data lives

. How to access or send messages to other services

. Environment-specific settings


	Procedural				Declarative
	----------				-----------
	. Series of ordered steps		. Specify end results

	. Based on assumptions			. System will determine
	about previous steps			which steps to execute

	. Easy to introduce errors		. Produces the same result
						each time


				 Main Benefits
				 -------------
	
	Version control		Self-documenting	Easy management


------------------------------------------------------------------------------------------------------------------------------------------------------------

* Where to use Docker Compose
-----------------------------

* Docker Compose was designed for a single server.

Designed For						Not Designed For
------------						----------------
. Local development					. Distributed systems

. Staging server						Not tooling for running containers across multipe hosts

. Continuous integration testing environment		. Complex production environments


* Docker Compose doesn't have support for independantly scaling services, or any kind of autoscaling.  The following example can show this situation:

* An Example Case Study
-----------------------
A company has two primary online applications:

	. Storefront service expecting increased traffic

	. Scheduler service has no additiona load

In the case that the storefronte requires to increase the traffic due to a promotional sale, for example, the only way is to run Docker Compose on multiple hosts, and this will scale up
the Scheduler at the same time, wasting resources.

	* SCALING IN DOCKER COMPOSE IS ALL OR NOTHING

	* DOCKER COMPOSE WAS DESIGNED FOR NONPRODUCTION ENVIRONMENTS

	* TO SOLVE THE PROBLEMS IN PRODUCTION ENVIRONMENTS WE USE DEDICATED ORCHESTRATION TOOLS SUCH AS Docker Swarm OR Kubernetes


------------------------------------------------------------------------------------------------------------------------------------------------------------------

	


 	














