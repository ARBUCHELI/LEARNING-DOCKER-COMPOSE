# 3. Docker Compose Core Features
---------------------------------

* Build arguments
-----------------
	ENVIRONMENT VARIABLES						BUILD ARGUMENTS
	---------------------						---------------
	. Accessible inside the running Docker container		. Accessible only at build time but not inside the container


* Build Argument Use Cases
--------------------------
. Build tool versions
. Cloud platform configurations
. Example: AWS region


* To specify a build argument in the docker-compose.yaml file:

version: "3.9"

services:
  storefront: 
    build: 
      context: . --> WE NEED THIS
      args: --> WE NEED THIS
        - region=us-east-1
        - alice=0
    environment:
      - runtime_env=dev
  database: 
    image: "mysql"
    env_file:
      - ./mysql/env_vars


* Environment Variable Use Cases
--------------------------------
Specifying current runtime environments, such as dev or test.

. Logger.log("logging from environment: {runtime_env}")

. if(runtime_env == "test") disable_payments()


version: "3.9"

services:
  storefront: 
    build: 
      context: .
      args:
        - region=us-east-1
        - alice=0
    environment: --> THIS IS HOW WE ADD ENVIRONMENT VARIABLES
      - runtime_env=dev
  database: 
    image: "mysql"
    env_file:
      - ./mysql/env_vars


	* USE ENVIRONMENT FILES IF THE LIST OF VARIABLES GETS TOO LONG


version: "3.9"

services:
  storefront: 
    build: 
      context: .
      args:
        - region=us-east-1
        - alice=0
    environment:
      - runtime_env=dev
  database: 
    image: "mysql"
    env_file: --> THIS IS THE WAY TO DO THIS
      - ./mysql/env_vars


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Mounting volumes
------------------

* Volumes
---------
Persistent container storage


* Target
--------
File directory path inside a container where volume data lives. Failing to provide this value, will result in a configuration error.


	ADD A volumes OBJECT TO THE SERVICE THAT NEEDS TO ACCESS THE VOLUME


docker-compose.yaml
-------------------
version: "3.9"

services:
  storefront: 
    build: .
  database: 
    image: "mysql"
    env_file:
      - ./mysql/env_vars
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d:ro IN THIS EXAMPE: /docker-entrypoint-initdb.d --> TARGET PATH, ./mysql: --> THIS PART IS THE SOURCE, ro --> ACCESS MODE


* Source
--------
File directory path on the host machine outside a container where volume data lives


	BASH DIRECTORY SYNTAX
	---------------------
	./	-------> Current directory
	../	-------> Parent directory
	/	-------> Root directory


	ACCESS MODES
	------------
	rw	Read-write	Default
	ro	Read-only	Safer


-----------------------------------------------------------------------------------------------------------------------------------------------------------------

* Named volumes
---------------
For easier lifecycle management

To give the name a volume, follow the following syntax:

docker-compose.yaml
-------------------
version: "3.9"

services:
  storefront: 
    build: .
  database: 
    image: "mysql"
    env_file:
      - ./mysql/env_vars
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d:ro
      - kineteco:/var/lib/mysql ---> HERE WE ARE USING THE VOLUME NAME.
volumes:
  kineteco: ---> HERE IS HOW TO NAME THE VOLUME.


	ADVANTAGES OF USING NAMED VALUES WITH COMPOSE
	---------------------------------------------
	. docker-compose up
	Copies volume data from old to new ---> THIS ENSURES THAT NOT DATA IS LOST


	. docker-compose down --volumes
	Automatically deletes named volumes



* Without Named Values
----------------------
The computer can run out of memory.


	Long Syntax			Short Syntax
	-----------			------------
	type: volume			kineteco: /var/lib/mysql:rw
	source: kineteco
	target: /var/lib/mysql
	read_only: false


------------------------------------------------------------------------------------------------------------------------------------------------------------------

	













































